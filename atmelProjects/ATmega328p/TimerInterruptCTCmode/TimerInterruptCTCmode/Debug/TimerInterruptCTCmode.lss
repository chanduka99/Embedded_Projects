
TimerInterruptCTCmode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000150  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074f  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  000009c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000292  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  0000175f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_11>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  8e:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <Port_Config>:
		TIMSK1 = (1<<OCIE1A);
}

void Port_Config(void){
	//set PORTD pin one as output
	DDRD |= 0B00000001;
  96:	50 9a       	sbi	0x0a, 0	; 10
	PORTD =0x00;
  98:	1b b8       	out	0x0b, r1	; 11
  9a:	08 95       	ret

0000009c <Counter_RESET>:
    }
	return 0;
}

void Counter_RESET(){
	TCNT1H = 0x00;
  9c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0x00;
  a0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  a4:	08 95       	ret

000000a6 <Timer_Interrupt_Config>:
 */ 
#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/interrupt.h>

void Timer_Interrupt_Config(int value){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	c8 2f       	mov	r28, r24
  ac:	d9 2f       	mov	r29, r25
		Counter_RESET();
  ae:	0e 94 4e 00 	call	0x9c	; 0x9c <Counter_RESET>
		//set CTC mode:0100 for WGM13 WGM12 WGM01 WGM00 and pre-scaler to 256
		TCCR1B = (1<<WGM12)|(1<<CS12);
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		//unsigned int value = 62500;
		OCR1AH = (unsigned char)(value >> 8); // Load the high byte
  b8:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL = (unsigned char)(value & 0xFF); // Load the low byte
  bc:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		//OCR1AH = 0B00110001;
		//OCR1A = 65200;
		//OCR1AL = 0B00000101;
		//OCR1AH = (unsigned char)(62500>>8);
		//enable output compare interrupt:OCIE1A of TIMSK1
		TIMSK1 = (1<<OCIE1A);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <main>:

int set = 1;

int main(void)
{
	Port_Config();
  cc:	0e 94 4b 00 	call	0x96	; 0x96 <Port_Config>
	//enable global interrupt
	sei();
  d0:	78 94       	sei
	//Timer Interrupt for 200ms
	//unsigned int compareValue = (16000000/256);
	Timer_Interrupt_Config(65200);
  d2:	80 eb       	ldi	r24, 0xB0	; 176
  d4:	9e ef       	ldi	r25, 0xFE	; 254
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <Timer_Interrupt_Config>
	
	
    /* Replace with your application code */
    while (set) 
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x16>
    {
    }
	return 0;
}
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret

000000ec <__vector_11>:
void Counter_RESET(){
	TCNT1H = 0x00;
	TCNT1L = 0x00;
}

ISR(TIMER1_COMPA_vect){
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	5f 93       	push	r21
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	if(PIND & 0B00000001){
 10e:	48 9b       	sbis	0x09, 0	; 9
 110:	09 c0       	rjmp	.+18     	; 0x124 <__vector_11+0x38>
		PORTD = 0x00;
 112:	1b b8       	out	0x0b, r1	; 11
		Counter_RESET();
 114:	0e 94 4e 00 	call	0x9c	; 0x9c <Counter_RESET>
		TCCR1B &= 0B11111011; 
 118:	e1 e8       	ldi	r30, 0x81	; 129
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8b 7f       	andi	r24, 0xFB	; 251
 120:	80 83       	st	Z, r24
 122:	03 c0       	rjmp	.+6      	; 0x12a <__vector_11+0x3e>
	}else{
		PORTD |= 0B00000001;
 124:	58 9a       	sbi	0x0b, 0	; 11
		Counter_RESET();
 126:	0e 94 4e 00 	call	0x9c	; 0x9c <Counter_RESET>
	}
	
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
