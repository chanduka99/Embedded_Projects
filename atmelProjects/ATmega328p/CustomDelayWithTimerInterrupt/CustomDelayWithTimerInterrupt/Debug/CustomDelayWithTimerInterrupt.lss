
CustomDelayWithTimerInterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075b  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000684  00000000  00000000  000009db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a7  00000000  00000000  0000105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c9  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00001761  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000017b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PORT_CONFIG>:

int volatile toggle = 0;
int volatile toggle2 = 0;
void PORT_CONFIG (void){
		//initializing DDRB
		DDRB |= 0B00000001;
  90:	20 9a       	sbi	0x04, 0	; 4
  92:	08 95       	ret

00000094 <TIMER_CONFIG>:
		
}

void TIMER_CONFIG (void){
	TCCR1B |= (1<<WGM12)|(1<<CS10)|(1<<CS12);//ctc mode set,prescaler 1024
  94:	e1 e8       	ldi	r30, 0x81	; 129
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8d 60       	ori	r24, 0x0D	; 13
  9c:	80 83       	st	Z, r24
	OCR1AH = 0x3D;
  9e:	8d e3       	ldi	r24, 0x3D	; 61
  a0:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL =0x09; //set for one second
  a4:	89 e0       	ldi	r24, 0x09	; 9
  a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 |=(1<<OCIE1A);
  aa:	ef e6       	ldi	r30, 0x6F	; 111
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
	TCNT1 = 0;
  b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	toggle = 1;		
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <toggle+0x1>
  c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <toggle>
  c8:	08 95       	ret

000000ca <DELAY>:
	return;
}

void DELAY (void){
	TIMER_CONFIG();
  ca:	0e 94 4a 00 	call	0x94	; 0x94 <TIMER_CONFIG>
	while (toggle == 1)
  ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <toggle>
  d2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <toggle+0x1>
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	d1 f3       	breq	.-12     	; 0xce <DELAY+0x4>
	{
	}
	return;
}
  da:	08 95       	ret

000000dc <START>:
				DELAY();
		}else{
			PORTB &= 0B11111110;//light off
			DELAY();
		}
		toggle2 = 1- toggle2;
  dc:	c1 e0       	ldi	r28, 0x01	; 1
  de:	d0 e0       	ldi	r29, 0x00	; 0
	return;
}

void START(void){
	while(1){
		if(toggle2==0){
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e8:	89 2b       	or	r24, r25
  ea:	21 f4       	brne	.+8      	; 0xf4 <START+0x18>
	
				PORTB |= 0B00000001; // light on
  ec:	28 9a       	sbi	0x05, 0	; 5
				DELAY();
  ee:	0e 94 65 00 	call	0xca	; 0xca <DELAY>
  f2:	03 c0       	rjmp	.+6      	; 0xfa <START+0x1e>
		}else{
			PORTB &= 0B11111110;//light off
  f4:	28 98       	cbi	0x05, 0	; 5
			DELAY();
  f6:	0e 94 65 00 	call	0xca	; 0xca <DELAY>
		}
		toggle2 = 1- toggle2;
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 102:	9e 01       	movw	r18, r28
 104:	28 1b       	sub	r18, r24
 106:	39 0b       	sbc	r19, r25
 108:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 10c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	}
 110:	e7 cf       	rjmp	.-50     	; 0xe0 <START+0x4>

00000112 <__vector_11>:
}
	

ISR(TIMER1_COMPA_vect){
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
	toggle = 0;
 122:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <toggle+0x1>
 126:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <toggle>
	TCCR1B &= 0B11111010; //counter stopped
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8a 7f       	andi	r24, 0xFA	; 250
 132:	80 83       	st	Z, r24
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <main>:
//}


int main(void)
{
	sei();
 144:	78 94       	sei
	PORT_CONFIG();
 146:	0e 94 48 00 	call	0x90	; 0x90 <PORT_CONFIG>
	START();
 14a:	0e 94 6e 00 	call	0xdc	; 0xdc <START>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
