
USARTtransmitterTEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b4a  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000734  00000000  00000000  00000f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000437  00000000  00000000  00001656  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f1  00000000  00000000  00001ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000023eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 39 01 	call	0x272	; 0x272 <main>
  88:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_CONFIG>:
	toggle2 = 1;
	while(toggle2 == 1){
		//looping in this until toggle2 will be zero by the ISR
	}
	return;
}
  90:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  94:	87 e6       	ldi	r24, 0x67	; 103
  96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  9a:	e1 ec       	ldi	r30, 0xC1	; 193
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	80 83       	st	Z, r24
  a4:	e2 ec       	ldi	r30, 0xC2	; 194
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	86 60       	ori	r24, 0x06	; 6
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <__vector_11>:
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
  c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  c8:	e1 e8       	ldi	r30, 0x81	; 129
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	80 83       	st	Z, r24
  d2:	ff 91       	pop	r31
  d4:	ef 91       	pop	r30
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <BUTTON_CONFIG>:
  e2:	e8 9a       	sbi	0x1d, 0	; 29
  e4:	e9 e6       	ldi	r30, 0x69	; 105
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	83 60       	ori	r24, 0x03	; 3
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <transmitDATA>:

void transmitDATA(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0))){
  f0:	e0 ec       	ldi	r30, 0xC0	; 192
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	90 81       	ld	r25, Z
  f6:	95 ff       	sbrs	r25, 5
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <transmitDATA+0x4>
		//waiting until transmit buffer is empty
	}
	UDR0 = data;
  fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  fe:	08 95       	ret

00000100 <transmit1>:
	return;
}

void transmit1(void){
	
	transmitDATA('H');
 100:	88 e4       	ldi	r24, 0x48	; 72
 102:	0e 94 78 00 	call	0xf0	; 0xf0 <transmitDATA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	83 ec       	ldi	r24, 0xC3	; 195
 10a:	99 e0       	ldi	r25, 0x09	; 9
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <transmit1+0xc>
 114:	00 c0       	rjmp	.+0      	; 0x116 <transmit1+0x16>
 116:	00 00       	nop
	_delay_ms(200);
	transmitDATA('E');
 118:	85 e4       	ldi	r24, 0x45	; 69
 11a:	0e 94 78 00 	call	0xf0	; 0xf0 <transmitDATA>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	83 ec       	ldi	r24, 0xC3	; 195
 122:	99 e0       	ldi	r25, 0x09	; 9
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <transmit1+0x24>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <transmit1+0x2e>
 12e:	00 00       	nop
	_delay_ms(200);
	transmitDATA('L');
 130:	8c e4       	ldi	r24, 0x4C	; 76
 132:	0e 94 78 00 	call	0xf0	; 0xf0 <transmitDATA>
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	83 ec       	ldi	r24, 0xC3	; 195
 13a:	99 e0       	ldi	r25, 0x09	; 9
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <transmit1+0x3c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <transmit1+0x46>
 146:	00 00       	nop
	_delay_ms(200);
	transmitDATA('L');
 148:	8c e4       	ldi	r24, 0x4C	; 76
 14a:	0e 94 78 00 	call	0xf0	; 0xf0 <transmitDATA>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	83 ec       	ldi	r24, 0xC3	; 195
 152:	99 e0       	ldi	r25, 0x09	; 9
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <transmit1+0x54>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <transmit1+0x5e>
 15e:	00 00       	nop
	_delay_ms(200);
	transmitDATA('O');
 160:	8f e4       	ldi	r24, 0x4F	; 79
 162:	0e 94 78 00 	call	0xf0	; 0xf0 <transmitDATA>
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	83 ec       	ldi	r24, 0xC3	; 195
 16a:	99 e0       	ldi	r25, 0x09	; 9
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <transmit1+0x6c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <transmit1+0x76>
 176:	00 00       	nop
	_delay_ms(200);
	transmitDATA('!');
 178:	81 e2       	ldi	r24, 0x21	; 33
 17a:	0e 94 78 00 	call	0xf0	; 0xf0 <transmitDATA>
 17e:	08 95       	ret

00000180 <transmit2>:
	return;
}


void transmit2(){
	transmitDATA('W');
 180:	87 e5       	ldi	r24, 0x57	; 87
 182:	0e 94 78 00 	call	0xf0	; 0xf0 <transmitDATA>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	83 ec       	ldi	r24, 0xC3	; 195
 18a:	99 e0       	ldi	r25, 0x09	; 9
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <transmit2+0xc>
 194:	00 c0       	rjmp	.+0      	; 0x196 <transmit2+0x16>
 196:	00 00       	nop
	_delay_ms(200);
	transmitDATA('O');
 198:	8f e4       	ldi	r24, 0x4F	; 79
 19a:	0e 94 78 00 	call	0xf0	; 0xf0 <transmitDATA>
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	83 ec       	ldi	r24, 0xC3	; 195
 1a2:	99 e0       	ldi	r25, 0x09	; 9
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <transmit2+0x24>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <transmit2+0x2e>
 1ae:	00 00       	nop
	_delay_ms(200);
	transmitDATA('R');
 1b0:	82 e5       	ldi	r24, 0x52	; 82
 1b2:	0e 94 78 00 	call	0xf0	; 0xf0 <transmitDATA>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	83 ec       	ldi	r24, 0xC3	; 195
 1ba:	99 e0       	ldi	r25, 0x09	; 9
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <transmit2+0x3c>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <transmit2+0x46>
 1c6:	00 00       	nop
	_delay_ms(200);
	transmitDATA('L');
 1c8:	8c e4       	ldi	r24, 0x4C	; 76
 1ca:	0e 94 78 00 	call	0xf0	; 0xf0 <transmitDATA>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	83 ec       	ldi	r24, 0xC3	; 195
 1d2:	99 e0       	ldi	r25, 0x09	; 9
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <transmit2+0x54>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <transmit2+0x5e>
 1de:	00 00       	nop
	_delay_ms(200);
	transmitDATA('D');
 1e0:	84 e4       	ldi	r24, 0x44	; 68
 1e2:	0e 94 78 00 	call	0xf0	; 0xf0 <transmitDATA>
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	83 ec       	ldi	r24, 0xC3	; 195
 1ea:	99 e0       	ldi	r25, 0x09	; 9
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <transmit2+0x6c>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <transmit2+0x76>
 1f6:	00 00       	nop
 1f8:	08 95       	ret

000001fa <START>:



void START(void){
		//if toggle==1 then transmit1
		if(toggle == 1){
 1fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <toggle>
 1fe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <toggle+0x1>
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	19 f4       	brne	.+6      	; 0x20c <START+0x12>
			transmit1();
 206:	0e 94 80 00 	call	0x100	; 0x100 <transmit1>
 20a:	08 95       	ret
			}else{
		//if toggle ==0 then tranmit2	
			transmit2();
 20c:	0e 94 c0 00 	call	0x180	; 0x180 <transmit2>
 210:	08 95       	ret

00000212 <__vector_1>:
		}
}

ISR(INT0_vect){
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
	toggle = 1-toggle;
 234:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <toggle>
 238:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <toggle+0x1>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	82 1b       	sub	r24, r18
 242:	93 0b       	sbc	r25, r19
 244:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <toggle+0x1>
 248:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <toggle>
	START();
 24c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <START>
}
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <main>:

int main(void)
{	
	
	//configure the USART transmitter
	USART_CONFIG();
 272:	0e 94 48 00 	call	0x90	; 0x90 <USART_CONFIG>
	//configure the external interrupt
	BUTTON_CONFIG();
 276:	0e 94 71 00 	call	0xe2	; 0xe2 <BUTTON_CONFIG>
	//enable global interrupts
	sei();
 27a:	78 94       	sei
 27c:	ff cf       	rjmp	.-2      	; 0x27c <main+0xa>

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
